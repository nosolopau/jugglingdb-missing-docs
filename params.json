{"tagline":"Yeah","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"JugglingDB: the missing documentation","body":"### JugglingDB: the missing documentation\r\n\r\n## Methods, setters and so on\r\n\r\n### Class methods\r\n\r\nStatic methods (methods with class scope) could be added declaring a function as a member of the model, as follows. Inside a class method, other class methods can be called using the model name as usual.\r\n\r\n```javascript\r\nvar User = db.define(\"user.user\", {\r\n    id: { type: Number },\r\n    username: { type: String },\r\n    type_id: { type: String },\r\n});\r\n\r\nUser.findByTypeId = function (type_id, cb) {\r\n    User.findOne({where: {type_id: type_id}}, cb);\r\n}\r\n```\r\n\r\n### Instance methods\r\n\r\nInstance methods can be added with prototype. Inside instance methods, the object itself can be called with this inside.\r\n\r\n```javascript\r\nvar User = db.define(\"user.user\", {\r\n    id: { type: Number },\r\n    username: { type: String },\r\n    type_id: { type: String },\r\n});\r\n\r\nUser.prototype.fullUsername = function () {\r\n    return this.username + \":\" + this.type_id;\r\n}\r\n```\r\n\r\n### Setters\r\n\r\nA custom setter can be defined as a virtual attribute for a model:\r\n\r\n```javascript\r\nRole.setter.permissions = function (permissions) {\r\n    this._permissions = permissions;\r\n}\r\n```\r\n\r\n## Relations\r\n\r\nWhen specifying model relations, the ORM will define some automatic methods for set and get the related objects. The relations can be of two types: hasMany and belongsTo. For instance, an author has many books, and each book belongs to an author. So we should mark the relation as “belongsTo” from the books side, since the books table will have the author id as a foreign key. From the authors side, we should specify a “hasMany” association with books.\r\n\r\n```javascript\r\nvar Author = db.define(\"authors\", {\r\n    id: { type: Number },\r\n    name: { type: String }\r\n});\r\nAuthor.hasMany(Book, {as: 'books',  foreignKey: 'author_id'});\r\n\r\nvar Book = db.define(\"books\", {\r\n    id: { type: Number },\r\n    title: { type: String }\r\n    author_id: { type: Number },\r\n});\r\nBook.belongsTo(Author, {as: 'author', foreignKey: 'author_id'});\r\n```\r\n\r\nTo get an author books, we can use the automatic asynchronous getter as follows:\r\n\t\r\n```javascript\r\nauthor.books(function (err, books) {\r\n    console.log(books);\r\n});\r\n```\r\n\r\nAnd also we can get a book author by using:\r\n\r\n```javascript\r\nbook.author(function (err, author) {\r\n    console.log(author);\r\n});\r\n```\r\n\r\n## Validations\r\n\r\nFor format-related validations (length, size, data type...) that doesn’t require additional queries, you should use a synchronous validator. If the validator requires an asynchronous operation, you should use an asynchronous validator. You can use the built-in validators or write your own. Validators are executed when saving the instance (with .save, .updateAttributes, .create and this kind of methods), or when explicitly executing .isValid method.\r\n\r\nOfficial documentation is in: http://jsdoc.info/1602/jugglingdb/validatable.html. \r\nAsynchronous validations\r\n\r\nThe method validateAsync can be used to perform an asynchronous-custom validation. For instance:\r\n\r\n```javascript\r\nRole.validateAsync('is_administrator', function (err, done) {\r\n    self = this;\r\n    this.constructor.find(this.id, function (error, previous) {\r\n        if (previous) {\r\n            if (previous.is_administrator !== self.is_administrator) {\r\n                err();    \r\n            }\r\n        } else {\r\n            err();\r\n        }\r\n        done();\r\n    });\r\n}, \"can’t change this value\");\r\n```\r\n\r\n### Getting the validations results\r\n\r\nIf the validation fails, the ORM returns a Validation error as a result of the .save method. Also, will include an array with the erros as result.errors.\r\n\r\n```javascript\r\napp.post('/roles', checkAuth, function (req, res, next) {\r\n    var newRole = new Role(req.body);\r\n    newRole.company_id = req.user.id_company;\r\n    newRole.save(function (err, result) {\r\n        if (err) {\r\n            console.log(err);\r\n            console.log(result.errors);\r\n            next(new APIError('orm', err, result));\r\n        } else {\r\n            Http.sendCreated(req, res, result);\r\n        }\r\n    });\r\n});\r\n```\r\n","google":""}